# Documentation: AI Chat Support Application

## Overview
This document provides detailed information on the AI Chat Support application, which enables users to upload and process files for document analysis and interact with a chatbot for real-time question answering.

---

## Features

### 1. **Static Content Processing**
- Allows users to upload up to **10 static content files** for processing.
- Supported file types: `pdf`, `txt`, `docx`, `html`, `htm`, `rtf`, `jpg`, `png`, `jpeg`, `tiff`, `csv`, `xls`, `xlsx`, `xlsb`.
- Stores and processes static content in a predefined dataset directory.

### 2. **User-Specific Document Processing**
- Users can upload **up to 3 personal files** for customized document analysis.
- Processes user documents and organizes them in a unique directory identified by a UUID.
- Supported file types are the same as static content.

### 3. **Chat Support**
- Users can interact with the chatbot by typing queries.
- Chat history is maintained in the session state for reference.
- Chat responses are generated by the `generate_chatbot_response` function, which processes user inputs and available documents.

---

## Application Structure

### **1. Importing Dependencies**
- Libraries: `streamlit`, `os`, `time`, `random`, `dotenv`.
- Custom modules: `generate_chatbot_response` and `process_and_store_files` (imported from `main`).

### **2. Constants and Configuration**
- `ALLOWED_FILE_TYPES`: Defines all supported file extensions.
- `MAX_USER_FILES`: Limits the number of user-specific uploads to 3 files.
- `MAX_STATIC_FILES`: Limits the number of static content uploads to 10 files.
- `STATIC_DATASET_PATH`: Directory to store static content datasets.
- Ensures the static dataset directory is created if it does not exist.

### **3. Streamlit Interface**

#### **Sidebar Input Parameters**
- **UUID**: Unique identifier for users (auto-generated or user-specified).
- **File Uploads**:
  - **Static Files**: Upload up to 10 static files.
  - **User Files**: Upload up to 3 user-specific files.

#### **Processing Buttons**
- **Process Static Content**:
  - Validates file uploads.
  - Saves and processes files using `process_and_store_files`.
- **Process User Documents**:
  - Ensures UUID is entered and validates file uploads.
  - Saves and processes files in a user-specific directory.

#### **Chat Interface**
- **Query Input**: Text input for user queries.
- **Send Query**:
  - Submits the query to the chatbot.
  - Uses `generate_chatbot_response` to generate responses.
  - Maintains a chat history in the session state.

### **4. Chat History**
- Displays all past interactions (queries and responses) in the chat interface.
- Supports session-based persistence for chat conversations.

---

## Key Functions and Workflow

### **Main Function (`main`)**
Handles the overall flow of the application, including user interface rendering and event handling.

1. **UUID Generation**:
   - Auto-generates a random UUID if not already present in the session state.
   - Allows users to specify a custom UUID.

2. **Static Content Upload**:
   - Validates the number of files uploaded.
   - Processes files using `process_and_store_files`.

3. **User Document Upload**:
   - Validates the number of files uploaded.
   - Processes files in a user-specific directory.

4. **Chat Query Handling**:
   - Sends user queries to the chatbot and retrieves responses.
   - Updates and displays chat history.

### **File Processing (`process_and_store_files`)
- Processes uploaded files by storing them in specified directories.
- Ensures existing data can be overwritten if `overwrite=True`.

### **Chatbot Response Generation (`generate_chatbot_response`)
- Generates a response for user queries based on available documents.
- Accepts the following parameters:
  - `user_id`: Identifier for the user.
  - `input_path`: Path for additional input data (optional).
  - `query`: User's query text.
  - `file_paths`: List of file paths for document analysis.

---

## Usage Instructions

### 1. **Start the Application**
Run the script using:
```bash
streamlit run app.py
```

### 2. **Upload Files**
- Navigate to the sidebar to upload files for processing.
- Static and user-specific files can be uploaded separately.

### 3. **Ask Questions**
- Use the input box to type your queries.
- Click "Send Query" to receive a response from the chatbot.

### 4. **View Chat History**
- Scroll down to review all past interactions with the chatbot.

---

## Error Handling
- Displays appropriate error messages for:
  - Missing UUID during file processing.
  - Exceeding file upload limits.
  - Empty query submissions.
- Uses `try-except` blocks to handle exceptions during response generation.

---

## Directory Structure
```plaintext
root/
|-- app.py
|-- main.py
|-- assets/
|   |-- static/
|   |   |-- dataset/
|   |-- user-{uuid}/
|       |-- dataset/
|-- .env
```

---

## Additional Notes
- Ensure that `main.py` includes implementations of `generate_chatbot_response` and `process_and_store_files`.
- Place a `.env` file with any required environment variables in the root directory.
- Supported file types can be extended by updating the `ALLOWED_FILE_TYPES` list.